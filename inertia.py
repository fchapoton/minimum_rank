class InertiaSet(object):

    def __init__(self, generators):
        self.generators=set(generators)
        self.generators.update([(y,x) for x,y in self.generators])
        self.reduce()

    def __add__(self, right):
        """
        Minkowski sum of self and right
        """
        from itertools import product
        return InertiaSet([(r1+r2, s1+s2) for ((r1,s1),(r2,s2)) in product(self.generators,
                                                                         right.generators)])

    def union(self, other):
        return InertiaSet(self.generators.union(other.generators))
    
    __or__=union

    def reduce(self):
        self.generators=set([x for x in self.generators 
                             if not any(x!=y and x[0]>=y[0] and x[1]>=y[1] 
                                        for y in self.generators)])

    def __repr__(self):
        return "Extended Inertia Set generated by %s"%self.generators

    def __eq__(self, other):
        return self.generators==other.generators

    def plot(self, *args, **kwargs):
        from sage.all import points
        kwargs.setdefault('pointsize', 70)
        return points(self.generators, *args, **kwargs)




